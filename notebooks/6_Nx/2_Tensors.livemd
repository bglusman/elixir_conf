# Nx / Multi-Dimensional Data with Nx Tensors

```elixir
Mix.install([
  {:nx, "~> 0.3.0"}
])

import IEx.Helpers
```

## Goal

To gain an understanding of and experience with tensors in Nx.

Credit: this notebook is influenced by examples in the [Nx repo](https://github.com/elixir-nx/nx/blob/main/nx/guides/intro-to-nx.livemd).

## Numerical Elixir, alias: Nx

[Nx](https://github.com/elixir-nx/nx) is Elixir's library for numerical computing. Vanilla Elixir's numeric data structures hit a roadblock when it comes to deep nesting or random access. It also lacks optimization for use cases that require millions of calculations.

Nx brings typed, multidimensional data, called tensors.

## Tensors

Tensors hold typed data. Types like:

* unsigned integers (u8, u16, u32, u64)
* signed integers (s8, s16, s32, s64)
* floats (f32, f64), brain floats (bf16)
* and complex (c64, c128)

The typed data is held in multiple, named dimensions. Tensors have a predetermined shape and type. Here is two dimensional array:

$$
\begin{bmatrix}
  1 & 2 \\\\
  3 & 4
\end{bmatrix}
$$

You may have written something similar using a list of lists.

```elixir
[
  [1, 2],
  [3, 4]
]
```

### Help

If at any point you want to know more about the Nx API, you can use IEx helpers. Here is a request for help with `Nx.tensor`:

```elixir
h(Nx.tensor())
```

### Make a tensor

Nx expresses multi-dimensional data using typed tensors. Tensors can be made from raw Elixir lists of numbers.

```elixir
tensor =
  1..4
  |> Enum.chunk_every(2)
  |> Nx.tensor(names: [:y, :x])
```

Tensors are made of:

* **Data**: the list of lists `[[1, 2], [3, 4]]`
* **Type**: a signed integer 64 bits long `s64`
* **Shape**: left to right with the outside dimensions first
* **Names**: the names of each dimension

```elixir
tensor.type()
```

```elixir
tensor.shape()
```

```elixir
tensor.names()
```

##### Access

To access any cell of the tensor, use:

```elixir
tensor[0][1]
```

Try getting the first row of the tensor:

<!--
 Possible answer
tensor[0]
-->

```elixir
# your code here...
```

Get a whole dimension like this:

```elixir
tensor[x: 1]
```

Get a range like this:

```elixir
tensor[y: 0..1]
```

## Challenge

### Make your own tensor

* make a `{4, 4}` tensor with a dimension named `:x` and another `:y`
* return a `{2, 2}` tensor containing the first two columns
  of the first two rows

<!-- livebook:{"disable_formatting":true} -->

```elixir
# your code here...
```

<details>
<summary>Solution</summary>

  > tensor1 = 1..16 |> Enum.chunk_every(4) |> Nx.tensor(names: [:x, :y])

  > tensor2 = tensor1[green: 0..1, bean: 0..1]
</details>

## Tensor Shape

Did you use `Nx.shape/1` to view the shape of your challenge tensors?

```elixir
Nx.shape(tensor)
```

`Nx.reshape/2` will make a new tensor with a new shape:

```elixir
reshaped = Nx.reshape(tensor, {1, 4}, names: [:batches, :values])
```

This operation reuses all of the tensor data; merely alters the metadata so that the new tensor has the same type with a new shape.

```elixir
tensor.type() == reshaped.type()
```

Can you reshape the tensor so it has 3 dimensions with one batch, one row, and four columns?

```elixir
your(code(here(...(your(code(here(...)))))))
```

<details>
<summary>Solution</summary>

> Nx.reshape(tensor, {1, 1, 4}, names: [:batches, :row, :values])
</summary>
</details>

<!-- livebook:{"break_markdown":true} -->

##### Dimensions

A dimension is called an _axis_. Axes can have names. Following is a tensor with the data values specified along with options for dimension names and type:

```elixir
Nx.tensor([[1, 2, 3]], names: [:rows, :cols], type: {:u, 8})
```

We created a tensor of the shape `{1, 3}`, with the type `u8`,
the values `[1, 2, 3]`, and two axes named `rows` and `cols`.

Now that we've created tensors, what can we do with them?

## Tensor aware functions

A tensor can be a scalar:

```elixir
pi = Nx.tensor(3.1415, type: {:f, 32})
```

<hr style="background-color: #800080;height: 5.0px;" />

<img src="https://static.thenounproject.com/png/2212696-200.png" alt="Brain icon" style="width: 85px; float: right; margin-right: 40px;" />

##### Scalar

A scalar is a real number rather than a vector. It is a quantity having only magnitude, not direction.

<hr style="background-color: #800080;height: 5.0px;" />

<!-- livebook:{"break_markdown":true} -->

Now we can then get the cosine of `pi`. We can also get cosine on the whole tensor.

```elixir
Nx.cos(pi) |> IO.inspect(label: "cosine of pi")
Nx.cos(tensor) |> IO.inspect(label: "cosine of tensor")
:ok
```

Aggregate the contents of a tensor using `sum`:

```elixir
Nx.sum(tensor)
```

This use of `sum/1` went across all of the dimensions: `1 + 2 + 3 + 4`.

What if you only wanted to sum a single axis?

```elixir
Nx.sum(tensor, axes: [:x])
```

### Challenge

#### Operate on tensors

* create a `{2, 2, 2}` tensor
* with the values `1..8`
* with dimension names `[:z, :y, :x]`
* calculate the sums along the `y` axis

```elixir
# your code here...
```

<details>
  <summary>Solution</summary>

  > tensor3 = 1..8
    |> Enum.chunk_every(2)
    |> Enum.chunk_every(2)
    |> Nx.tensor(names: [:z, :y, :x])

  > Nx.sum(tensor3, axes: [:y]) 
</details>

## Combining Tensors

Use operators to combine tensors. Subtract one tensor from another:

$$
\begin{bmatrix}
  5 & 6 \\\\
  7 & 8
\end{bmatrix} -
\begin{bmatrix}
  1 & 2 \\\\
  3 & 4
\end{bmatrix} =
\begin{bmatrix}
  4 & 4 \\\\
  4 & 4
\end{bmatrix}
$$

```elixir
sub = Nx.tensor([[5, 6], [7, 8]])
Nx.subtract(sub, tensor)
```

What about tensors with different shapes? The subtraction wouldn't work.

```elixir
sub = Nx.tensor([[5, 6], [7, 8], [9, 0])
Nx.subtract(sub, tensor)
```

That's when we reach for broadcasting.

## Broadcasts

This:

$$
\begin{bmatrix}
  1 & 2 \\\\
  3 & 4
\end{bmatrix} - 1 =
\begin{bmatrix}
  0 & 1 \\\\
  2 & 3
\end{bmatrix}
$$

is mathematically the same as this:

$$
\begin{bmatrix}
  1 & 2 \\\\
  3 & 4
\end{bmatrix} -
\begin{bmatrix}
  1 & 1 \\\\
  1 & 1
\end{bmatrix} =
\begin{bmatrix}
  0 & 1 \\\\
  2 & 3
\end{bmatrix}
$$

<!-- livebook:{"break_markdown":true} -->

The broadcast function takes a tensor or a scalar and a shape.

```elixir
Nx.broadcast(tensor, {2, 2, 2})
```

Provide a tensor as the second argument and `broadcast/2` will extract its shape:

```elixir
sub =
  1..8
  |> Enum.chunk_every(2)
  |> Enum.chunk_every(2)
  |> Nx.tensor()

Nx.broadcast(tensor, sub)
```

The code broadcasts our `tensor` to the shape `{2, 2, 2}`.

It works with a scalar, too:

```elixir
Nx.subtract(tensor, 1)
```

This result is possible because Nx broadcasts _both tensors_ to compatible shapes. That means you can provide scalar values as either argument:

```elixir
Nx.subtract(10, tensor)
```

Or subtract a row or column. Mathematically, it would look like this:

$$
\begin{bmatrix}
  1 & 2 \\\\
  3 & 4
\end{bmatrix} -
\begin{bmatrix}
  1 & 2
\end{bmatrix} =
\begin{bmatrix}
  0 & 0 \\\\
  2 & 2
\end{bmatrix}
$$

which is the same as this:

$$
\begin{bmatrix}
  1 & 2 \\\\
  3 & 4
\end{bmatrix} -
\begin{bmatrix}
  1 & 2 \\\\
  1 & 2
\end{bmatrix} =
\begin{bmatrix}
  0 & 0 \\\\
  2 & 2
\end{bmatrix}
$$

```elixir
Nx.subtract(tensor, Nx.tensor([1, 2]))
```

The broadcast worked as advertised, copying the `[1, 2]` row
enough times to fill a `{2, 2}` tensor. A tensor with a
dimension of `1` will broadcast to fill the tensor:

```elixir
[[[1, 2, 3]]]
|> Nx.tensor()
|> Nx.broadcast({4, 2, 3})
```

## Numerical definitions (defn)

The `defn` macro simplifies the expression of mathematical formulas
containing tensors. Numerical definitions have two primary benefits
over classic Elixir functions.

* They are _tensor-aware_. Nx replaces operators like `Kernel.-/2`
  with the `Defn` counterparts &mdash; which in turn use `Nx` functions
  optimized for tensors &mdash; so the formulas we express can use
  tensors out of the box.

* `defn` definitions allow for building computation graph of all the
  individual operations and using a just-in-time (JIT) compiler to emit
  highly specialized native code for the desired computation unit.

We don't have to do anything special to get access to
get tensor awareness beyond importing `Nx.Defn` and writing
our code within a `defn` block.

To use Nx in a Mix project or a notebook, we need to include
the `:nx` dependency and import the `Nx.Defn` module. The
dependency is already included, so import it in a Code cell,
like this:

```elixir
import Nx.Defn
```

There are a few restrictions.

* allows only numerical arguments in the form of primitives or tensors as arguments or return values
* has a subset of the language within the `defn` block
  * macros, pipes, and conditionals

Code in a `defn` block uses tensor aware operators and types. Numerical
definitions can also run on accelerated numerical processors like GPUs and
TPUs.

```elixir
defmodule TensorMath do
  import Nx.Defn

  defn subtract(a, b) do
    a - b
  end
end
```

```elixir
TensorMath.subtract(10, 5)
```

```elixir
TensorMath.subtract(tensor, Nx.tensor([1, 2]))
```

## Automatic differentiation (autograd)

One Nx feature we will take advantage of in this training is `autograd`.

The "grad" in `autograd` refers to the gradient, or the rate of change. Gradients are important for building probabilistic models. If you've watched Bruce Tate's [Groxio](https://www.youtube.com/watch?v=NcsqGS6SVXg) videos on machine learning you have seen the importance of gradients to probability in creating a model to solve FizzBuzz.

Differential equations are used to take gradients. Nx provides a feature called automatic differentiation, or autograd.

<!-- livebook:{"disable_formatting":true} -->

```elixir
h Nx.Defn.grad
```

There are many more features to Nx that we cannot cover in this training. See the [documentation](https://hexdocs.pm/nx/Nx.html) to continue experimenting on your own.

<!-- livebook:{"break_markdown":true} -->

[<span style="float: left; color: #800080; font-weight: bold; font-family: FreeMono, monospace">< previous</span>](1_Intro.livemd)

[<span style="float: right; color: #800080; font-weight: bold; font-family: FreeMono, monospace">next chapter: Nx Plus ></span>](../7_NxPlus/1_Explorer.livemd)
