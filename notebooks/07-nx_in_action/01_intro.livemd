# Nx in Action: ML with Elixir

```elixir

```

## Framework

### Define the Problem

What is the problem you want to solve? What is the quesition you want to answer?

### Gather the Data

Find a relevant dataset. 

### Prepare & Analyze

Take a good look at the data. Look for potential problems, patterns, classifications, correlations and comparisons. Turn “abnormal” data into “normalized” data. Normalizing includes extraction, loading, and data cleaning to identify aberrant, missing, or outliers. 

### Model Data (Train)

Use your problem and dataset to determine the best algorithms. The wrong model can lead to poor performance.

### Test 

After you've trained your model, test your model to look for over- or underfitting. 

## Neural Networks & Axon

Let's review Neural Networs in Axon.

### dense

Axon's `dense` is a functional implementation of a dense layer. It performs linear transformation on the input. It takes these paramters in these shapes:

  * `input` - `{batch_size, * input_features}`
  * `kernel` - `{input_features, output_features}`
  * `bias` - `{}` or `{output_features}`

Like this: `Axon.Layers.dense(input, kernel, bias)`

The input is transformed by computing the kernel matrix parameter and bias parameter:

   `Nx.dot(input, kernel) + bias`

It returns `{batch_size, *, output_features}`

Since `kernel` and `bias` are typically learnable parameters, they are trained using a gradient method for optimization.

A gradient method is a type of algorithm to solve problems of form, in our class a slope. In this lesson we will see use a gradient descent method to determine the loss function. 

Gradient descent is used to find the minimum value for a function. You begin with randam values for the parameters and then take small steps in the direction of the slope at each iteration. 

## Next Steps or "what we don't have time to cover here"

#### Bilinear layers in Axon

Two input layers.

#### Convolutional & Pooling Layers in Axon

Axon provides a functional implementation of a general dimensional convolutional layer, which are commonly used in computer vision or when working with sequences and other input signals. Pooling is applied to the spatial dimension of the input tensor, often after convolutional layers.