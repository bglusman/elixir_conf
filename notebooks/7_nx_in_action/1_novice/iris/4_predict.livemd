# Nx in Action/ Novice/ Iris / Predict

```elixir
Mix.install([
  {:axon, "~> 0.1.0"},
  {:exla, "~> 0.2.2"},
  {:nx, "~> 0.2.1"},
  {:explorer, "~> 0.2.0"},
  {:kino, "~> 0.6.2"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:req, "~> 0.3.0"},
  {:scidata, "~> 0.1.9"}
])
```

## Make Predictions with an Trained Model

## The Plan

1. Define the problem
2. Pepare the data
3. Evaluate the algorithms
4. Choose the model
5. Enhance the model
6. Make the predictions

## Define the problem

Can we predict Iris species with our trained model?

## Prepare the data

```elixir
{inputs, targets} = Scidata.Iris.download()
count = Enum.count(inputs)

imax =
  Nx.tensor(inputs)
  |> Nx.reduce_max(axes: [0], keep_axes: true)

inputs =
  Enum.map(inputs, fn i ->
    Nx.divide(Nx.tensor(i), imax)
  end)

targets =
  Enum.map(targets, fn i ->
    Nx.divide(Nx.tensor([i]), 2)
  end)

dataset = Enum.zip(inputs, targets) |> Enum.shuffle()
ratio = 0.75
split = fn d -> Enum.split(d, ceil(count * ratio)) end

{_, test_set} = split.(dataset)
:ok
```

## Load the model

```elixir
model_file = "elixir_conf/models/iris_nn_model.axon"

File.read!(model_file)
|> Axon.deserialize()
```

```elixir
model_file = "elixir_conf/models/iris_nn_model.axon"

{model, %{model_state: model_state}} =
  File.read!(model_file)
  |> Axon.deserialize()

model
```

## Predict

```elixir
acc = {0, 0}

{correct, incorrect} =
  test_set
  |> Enum.reduce(acc, fn {input, truth}, {a, b} ->
    predicted =
      Axon.predict(model, model_state, input)
      |> Nx.to_flat_list()
      |> List.first()
      |> Float.ceil(1)

    truth = List.first(Nx.to_flat_list(truth))

    if truth == predicted do
      IO.puts(
        IO.ANSI.format([
          :green,
          "[x] prediction correct: #{predicted}"
        ])
      )

      {a + 1, b}
    else
      IO.puts(
        IO.ANSI.format([
          :red,
          "[ ] prediction incorrect: Actual #{truth} Predicted #{predicted}"
        ])
      )

      {a, b + 1}
    end
  end)

IO.puts(" ")
IO.puts(IO.ANSI.format([:green, "#{correct} prediction correct"]))
IO.puts(IO.ANSI.format([:red, "#{incorrect} prediction incorrect"]))

success_rate = (correct / (incorrect + correct) * 100) |> Float.ceil(1)

"Prediction Rate: #{success_rate}%"
```
