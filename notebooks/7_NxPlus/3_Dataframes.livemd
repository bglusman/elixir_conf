# Nx / Explorer / DataFrames

```elixir
Mix.install([
  {:explorer, "~> 0.2.0"}
])
```

## Goal

To gain an understand of and experience with dataframes in Explorer.

Credit: this notebook is influenced by examples in the [Explorer repo](https://github.com/elixir-nx/explorer/tree/main/notebooks).

## DataFrames

A dataframe is really just a collection of series of the same size. Which is why you can create a dataframe from a keyword list.

```elixir
alias Explorer.DataFrame
alias Explorer.Series

df = DataFrame.new(a: [1, 2, 3], b: ["a", "b", "c"])
```

Inspect it.

```elixir
df
```

Access details:

```elixir
df = DataFrame.new(a: [1, 2, 3], b: ["a", "b", "c"])

IO.inspect(DataFrame.names(df), label: "Names")
IO.inspect(DataFrame.dtypes(df), label: "Datatypes")
IO.inspect(DataFrame.shape(df), label: "Shape")
IO.inspect(DataFrame.n_rows(df), label: "# of rows")
IO.inspect(DataFrame.n_columns(df), label: "# of columns")
```

Access the head and tail.

```elixir
DataFrame.head(df)
```

```elixir
DataFrame.tail(df, 2)
```

## Dataset

The Iris dataset was developed by Edgar Anderson in 1936. We are starting with this dataset because it is simple and easy to understand. It is also one of the datasets in Explorer.

It includes three iris species. There are 50 samples of each species along with additional properties. One flower species is linearly separable from the other two, but the other two are not linearly separable from each other.

<span style="font-size: 14px;">
Citation: R. A. Fisher (1936) <span style="font-style: italic;">The use of multiple measurements in taxonomic problems. Annals of Eugenics.
</span>

![](images/iris.png)
![](images/iris.png)

```elixir
df = Explorer.Datasets.iris()
```

Note the features in the dataframe:

* sepal_length `float`
* sepal_width `float`
* petal_length `float`
* petal_width `float`
* species `string`

```elixir
DataFrame.shape(df)
```

```elixir
DataFrame.n_rows(df)
```

```elixir
DataFrame.n_columns(df)
```

Select particular features:

```elixir
DataFrame.select(df, ["sepal_length", "petal_length", "species"])
```

Select features that start with "petal":

```elixir
DataFrame.select(df, &String.contains?(&1, "petal"))
```

Keep only the "species" column:

```elixir
Explorer.DataFrame.select(df, &(&1 == "species"), :keep)
```

Drop the petal width:

```elixir
Explorer.DataFrame.select(df, &(&1 == "petal_width"), :drop)
```

#### Filter

Use callbacks on the dataframe to generate boolean mask series 
of the same size as the dataframe.

```elixir
DataFrame.filter(df, &Series.greater_equal(&1["sepal_length"], 7.7))
```

You can pipe filters:

```elixir
DataFrame.filter(df, &Series.greater_equal(&1["sepal_length"], 7.7))
|> DataFrame.filter(&Series.less(&1["petal_width"], 2.3))
|> DataFrame.select(&(&1 == "petal_width"), :keep)
```

### Mutate

Add columns or change existing ones. You can pass in new columns as keyword arguments. It also works to transform existing columns. You may not always want to use keyword arguments. Given that column names are String.t(), it may make more sense to use a map.

<!-- livebook:{"break_markdown":true} -->

Mutate the petal length from a float to an integer:

```elixir
DataFrame.mutate(df,
  petal_length: &Series.cast(&1["petal_length"], :integer)
)
```

### Sampling

Random samples can give us a portion of the samples. The function is seedable.

```elixir
DataFrame.sample(df, 0.01)
|> DataFrame.select(&(&1 in ["species"]), :keep)
```

```elixir
DataFrame.pull(df, "sepal_width")
```

```elixir
DataFrame.take(df, [1, 50, 100])
|> DataFrame.select(&(&1 in ["species"]), :keep)
```

```elixir
DataFrame.slice(df, 100, 5)
|> DataFrame.select(&(&1 in ["species"]), :keep)
```

#### Grouping

Grouping is one way to get insight into the relationships in the dataset. Here the data is grouped by species and summaries the minimum and maximum petal length for each species.

```elixir
df
|> Explorer.DataFrame.group_by("species")
|> Explorer.DataFrame.summarise(petal_length: [:max, :min])
```

You can use the following aggregations:

* `:min` - Take the minimum value within the group. See `Explorer.Series.min/1`.
* `:max` - Take the maximum value within the group. See `Explorer.Series.max/1`.
* `:sum` - Take the sum of the series within the group. See `Explorer.Series.sum/1`.
* `:mean` - Take the mean of the series within the group. See `Explorer.Series.mean/1`.
* `:median` - Take the median of the series within the group. See `Explorer.Series.median/1`.
* `:first` - Take the first value within the group. See `Explorer.Series.first/1`.
* `:last` - Take the last value within the group. See `Explorer.Series.last/1`.
* `:count` - Count the number of rows per group.
* `:n_unique` - Count the number of unique rows per group.

<!-- livebook:{"break_markdown":true} -->

#### Arrange

```elixir
DataFrame.arrange(df, "sepal_length")
```

More granular:

```elixir
DataFrame.arrange(df, asc: "petal_width", desc: "sepal_length")
```

#### Distinct

```elixir
DataFrame.distinct(df, columns: ["species"])
```

### Rename

Rename can take either a list of new names or a callback that is passed to `Enum.map/2` against the names. You can also use a map or keyword args to rename specific columns.

```elixir
DataFrame.rename(df, species: "target")
```

```elixir
DataFrame.rename_with(df, &("elixirconf_" <> &1))
```

### Joins

Joining is *fast* and easy. You can specify the columns to join on and how to join. Polars even supports cartesian (cross) joins, so `Explorer` does too.

```elixir
df1 = DataFrame.select(df, ["petal_length", "petal_width"])
df2 = DataFrame.select(df, ["petal_length", "sepal_length"])
DataFrame.join(df1, df2)
```

To Explore future, visit the [documentation](https://hexdocs.pm/explorer/Explorer.html).

<!-- livebook:{"break_markdown":true} -->

[<span style="float: left; color: #800080; font-weight: bold; font-family: FreeMono, monospace">< previous</span>](2_Series.livemd)

[<span style="float: right; color: #800080; font-weight: bold; font-family: FreeMono, monospace">next ></span>](4_Axon.livemd)
